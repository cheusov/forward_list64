/*
 * Created by Aleksey Cheusov <vle@gmx.net>
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining
 * a copy of the software and accompanying documentation covered by this license
 * (the “Software”) to use, reproduce, display, distribute, execute, and transmit
 * the Software, and to prepare derivative works of the Software, and to permit
 * third-parties to whom the Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must be
 * included in all copies of the Software, in whole or in part, and all derivative
 * works of the Software, unless such copies or derivative works are solely in
 * the form of machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 * A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER
 * LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
 * IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include <string>

#include "forward_list64.h"
#include "bench_struct.h"

static int main2()
{
    typedef __forward_list64_impl::list_item<char[1]> Type1;
	std::cout << sizeof(Type1) << '\n';
	std::cout << Type1::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[2]> Type2;
	std::cout << sizeof(Type2) << '\n';
	std::cout << Type2::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[3]> Type3;
	std::cout << sizeof(Type3) << '\n';
	std::cout << Type3::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[4]> Type4;
	std::cout << sizeof(Type4) << '\n';
	std::cout << Type4::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[5]> Type5;
	std::cout << sizeof(Type5) << '\n';
	std::cout << Type5::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[6]> Type6;
	std::cout << sizeof(Type6) << '\n';
	std::cout << Type6::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[7]> Type7;
	std::cout << sizeof(Type7) << '\n';
	std::cout << Type7::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[8]> Type8;
	std::cout << sizeof(Type8) << '\n';
	std::cout << Type8::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[9]> Type9;
	std::cout << sizeof(Type9) << '\n';
	std::cout << Type9::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[10]> Type10;
	std::cout << sizeof(Type10) << '\n';
	std::cout << Type10::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[11]> Type11;
	std::cout << sizeof(Type11) << '\n';
	std::cout << Type11::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[12]> Type12;
	std::cout << sizeof(Type12) << '\n';
	std::cout << Type12::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[13]> Type13;
	std::cout << sizeof(Type13) << '\n';
	std::cout << Type13::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[14]> Type14;
	std::cout << sizeof(Type14) << '\n';
	std::cout << Type14::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[15]> Type15;
	std::cout << sizeof(Type15) << '\n';
	std::cout << Type15::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[16]> Type16;
	std::cout << sizeof(Type16) << '\n';
	std::cout << Type16::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[17]> Type17;
	std::cout << sizeof(Type17) << '\n';
	std::cout << Type17::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[28]> Type28;
	std::cout << sizeof(Type28) << '\n';
	std::cout << Type28::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[29]> Type29;
	std::cout << sizeof(Type29) << '\n';
	std::cout << Type29::max_count << '\n';
	std::cout << '\n';

    typedef __forward_list64_impl::list_item<char[170]> Type170;
	std::cout << sizeof(Type170) << '\n';
	std::cout << Type170::max_count << '\n';
	std::cout << '\n';

    for (unsigned i = 0; i < 16; ++i) {
        void *p = new __forward_list64_impl::list_item<uint32_t>();
        assert((uintptr_t(p) & 63) == 0);
        std::cout << p << '\n';
    }

	return 0;
}

int main()
{
    typedef forward_list64<mytype> list_type;
    list_type list;
    for (unsigned i = 0; i < BENCH_COUNT; ++i) {
        list.push_front(value);
    }

    return 0;
}
