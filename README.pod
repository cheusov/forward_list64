=pod

=head1 Overview:

B<forward_list64> is a C++-17 class
which is very similar to B<std::forward_list>.
It is implemented in a one-file B<forward_list64.h>.
So, you can just copy it to your project.

Basic idea of this implementation is to use 64-byte cache lines for better efficiency.
That is, each node of the list is 64-byte in size and is alligned to 64 bytes
(on most desktop/server/mobile CPUs the size of cache line is 64 byte).
64-byte node allows to contain
more than one item in it, thus minimizing the number of memory allocations
and deallocations. Also, alignment to 64 byte minimizes the number of cache misses.

=head1 Performance and benchmarks

On my systems basic operations on B<forward_list64> are B<2 to 15 times faster
than B<std::forward_list>>.
However, performance of B<forward_list64> hightly depends on two factors:

=over 2

=item *

size of item

=item *

implementation of I<aligned_alloc> function in libc

=back

Unfortunately, many systems including glibc-based Linux-es (glibc<=2.32) and
macOS (Darwin<=23.1.0) provide libc with extreamly inefficient
I<aligned_alloc>. On these systems
I<aligned_alloc(64, 64)> works 4-18 times slower than I<malloc(64)>.
Obviously, this dramatically affects the overall performance. On the other hand,
on NetBSD and FreeBSD operating systems, where I<jemalloc> is the default,
I<aligned_alloc(64, 64)> has the same performance as I<malloc(64)>.

So, on Linux-es and macOS I'd recommend use one of the following open source
malloc implementations:

=over 2

=item *

Google's I<tcmalloc> L<https://google.github.io/tcmalloc/overview.html>

=item *

FreeBSD's I<jemalloc> L<https://jemalloc.net/>

=item *

Microsoft's I<mimalloc> L<https://github.com/microsoft/mimalloc>

=back

=head1 Implementation

Internal structure of B<forward_list64> node depends on item size and
the size of pointer. For example, if
the size of item is 1 byte and the size of pointer is 8 bytes, then the
node structure is as follows.
    
    struct alignas(64) Node {
        // 8 + 56 == 64
        std::uintptr_t next; // pointer to the next node and node capacity, 8 bytes
        std::uint8_t items[56]; // 56 bytes
    }

If the size of item is 4 bytes and the size of pointer is also 4 bytes, then the
node structure is as follows.

    struct alignas(64) Node {
        // 4 + 60 == 64
        std::uintptr_t next; // pointer to the next node and node capacity, 4 bytes
        uint32_t items[15]; // 15*4=60 bytes
    }

If the size of item is >=28 bytes (on 64-bit systems) or >=30 bytes (on 32-bit systems), then
the structure of Node is very simple and similar to B<std::forward_list>. As you can see,
it doesn't fit into 64 bytes and is not aligned to cache line.

    struct Node {
        std::uintptr_t next;
        T item;
    }

The structure of Node is configured automatically with the help of C++ partial specialization.

The number of items in the node is stored in lower 6 bits
of the pointer to the next node.

=head1 Project

B<forward_list64> build system is mk-configure (https://github.com/cheusov/mk-configure).
Do not use GNU make. It won't work!

Project consists of the following components:

=over 2

=item *

forward_list64.h -- forward_list64 class implementation, you can copy this file to your system by hand

=item *

forward_list64_test -- test application

=item *

bench_forward_list.cc and bench_forward_list64.cc -- tools that may be used for benchmarking

=item *

bench_malloc.c, bench_posix_memalign.c and bench_aligned_alloc.c -- tools for benchmarking memory allocation functions

=item *

bench_cacheline.c -- tool for experiments with cache lines

=back

=head1 Limitations

B<forward_list64> is not fully compatible with C++ standards and has some limitations:

=over 2

=item *

inserting to the middle of list is not supported

=item *

removing from the middle of list is not supported

=item *

template argument for Allocator is ignored for now

=item *

some methods are not implemented yet

=back

=head1 Links

=over 2

=item "Algorithms for Modern Hardware" book by Sergey Slotin

L<https://en.algorithmica.org/hpc/>

=item Google's I<tcmalloc>

L<https://google.github.io/tcmalloc/overview.html>

=item I<jemalloc>

L<https://jemalloc.net/>

=item Microsoft's I<mimalloc>

L<https://github.com/microsoft/mimalloc>

=back

=head1 Copyright

Written by Aleksey Cheusov <vle@gmx.net>

https://github.com/cheusov/forward_list64

=cut
