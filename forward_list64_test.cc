/*
 * Created by Aleksey Cheusov <vle@gmx.net>
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining
 * a copy of the software and accompanying documentation covered by this license
 * (the “Software”) to use, reproduce, display, distribute, execute, and transmit
 * the Software, and to prepare derivative works of the Software, and to permit
 * third-parties to whom the Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must be
 * included in all copies of the Software, in whole or in part, and all derivative
 * works of the Software, unless such copies or derivative works are solely in
 * the form of machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 * A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER
 * LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
 * IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include <iostream>
#include <forward_list>

#include "forward_list64.h"

typedef std::forward_list<int> list_type;
typedef forward_list64<int> list64_type;

template <typename list_type>
void print_list2(const list_type &list) {
    typename list_type::const_iterator begin = list.begin();
    typename list_type::const_iterator end = list.end();
    for (; begin != end; begin++) {
        std::cout << *begin << '\n';
    }
}

template <typename list_type>
void print_list3(list64_type &list) {
    typename list_type::iterator begin = list.begin();
    typename list_type::iterator end = list.end();
    for (; begin != end; begin++) {
        std::cout << *begin << '\n';
    }
}

static list64_type list64;
static list_type list;

static void check()
{
    std::string list_items;
    for (auto item: list) {
        list_items += ' ';
        list_items += std::to_string(item);
    }

    std::string list64_items;
    for (auto item: list64) {
        list64_items += ' ';
        list64_items += std::to_string(item);
    }

    std::cout << list_items << '\n';
    std::cout << list64_items << '\n';
    assert(list64_items == list_items);
}

template <typename ListType>
static void create_list(ListType &l) {
    for (int i = 0; i < 10; ++i) {
        l.push_front(10 + 10 * i);
    }
    for (auto it = l.cbegin(); it != l.cend(); ++it) {
        l.push_front(*it);
    }
}

template <typename ListType>
static void clear_list(ListType &l) {
    l.clear();
}

template <typename ListType>
static void create_N_default_items(ListType &l, int n) {
    ListType local_list(n);
    std::swap(local_list, l);
}

template <typename ListType>
static void create_list_of_5(ListType &l, size_t n) {
    ListType local_list(n, 5);
    std::swap(local_list, l);
}

template <typename ListType>
static void create_list_from_array(ListType &l) {
    static const int array[] = {
            1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
            11, 12, 13, 14, 15, 16, 17, 18, 19, 20
    };
    ListType local_list(array, array + std::size(array));
    std::swap(local_list, l);
}

template <typename ListType>
static void copy(ListType &l) {
    ListType local_list(l);
    std::swap(local_list, l);
}

template <typename ListType>
static void move(ListType &l) {
    ListType temp;
    for (int i = 0; i < 100; i += 5) {
        temp.push_front(i);
    }
    ListType other_list(reinterpret_cast<ListType&&>(temp));
    l.swap(other_list);
}

template <typename ListType>
static void initializer_list(ListType &l) {
    ListType temp {
        10, 20, 30, 40, 50,
        11, 21, 31, 41, 51,
        12, 22, 32, 42, 52,
        13, 23, 33, 43, 53
    };
    l.swap(temp);
}

template <typename ListType>
static void assign(ListType &l) {
    ListType temp {
                          110, 120, 130, 140, 150,
                          111, 121, 131, 141, 151,
                          112, 122, 132, 142, 152,
                          113, 123, 133, 143, 153
                  };
    l = temp;
}

template <typename ListType>
static void assign_move(ListType &l) {
    ListType temp {
            210, 220, 230, 240, 250,
            211, 221, 231, 241, 251,
            212, 222, 232, 242, 252,
            213, 223, 233, 243, 253
    };
    l.operator = (reinterpret_cast<ListType&&>(temp));
}

template <typename ListType>
static void assign_ilist(ListType &l) {
    l = {
            310, 320, 330, 340, 350,
            311, 321, 331, 341, 351,
            312, 322, 332, 342, 352,
            313, 323, 333, 343, 353
    };
}

template <typename ListType>
static void assign_method1(ListType &l) {
    l.assign(std::size_t(22), 90);
}

template <typename ListType>
static void assign_method2(ListType &l) {
    l.assign({
        410, 420, 430, 440, 450,
        411, 421, 431, 441, 451,
        412, 422, 432, 442, 452,
        413, 423, 433, 443, 453
    });
}

template <typename ListType>
static void assign_method3(ListType &l) {
    static const int array[] = {
            71, 72, 73, 74, 75,
            76, 77, 78, 79, 80,
            81, 82, 83, 84, 85,
            86, 87, 88, 89, 90
    };
    l.assign(array, array + std::size(array));
}

template <typename ListType>
static void front(ListType &l) {
    l.push_front(l.front());
}

template <typename ListType>
static void empty(ListType &l) {
    l.push_front(l.empty());
}

int main()
{
    create_list(list);
    create_list(list64);
    check();

    clear_list(list);
    clear_list(list64);
    check();

    empty(list);
    empty(list64);
    check();

    for (int n = 0; n < 80; ++n) {
        create_N_default_items(list, n);
        create_N_default_items(list64, n);
        check();
    }

    create_list_of_5(list, 40);
    create_list_of_5(list64, 40);
    check();

    create_list_from_array(list);
    create_list_from_array(list64);
    check();

    copy(list);
    copy(list64);
    check();

    move(list);
    move(list64);
    check();

    initializer_list(list);
    initializer_list(list64);
    check();

    assign(list);
    assign(list64);
    check();

    assign_move(list);
    assign_move(list64);
    check();

    assign_ilist(list);
    assign_ilist(list64);
    check();

    assign_method1(list);
    assign_method1(list64);
    check();

    assign_method2(list);
    assign_method2(list64);
    check();

    assign_method3(list);
    assign_method3(list64);
    check();

    list.get_allocator();
    list64.get_allocator();

    front(list);
    front(list64);
    check();

    empty(list);
    empty(list64);
    check();

    while (!list.empty()) {
        //std::cout << list.front() << '/' << list64.front() << '\n';
        list.pop_front();
        list64.pop_front();
        check();
    }
}
